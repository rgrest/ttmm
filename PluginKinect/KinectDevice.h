/**
* @file KinectBuffer.h
* @author FH-Minden Musikinformatik 2015, group Kinect (Tine, Isabell)
* @brief Defines class KinectDevice which extends Device & provides functions
*for handling a kinect sensor
*
*/

#pragma once

#include <array>
#include <thread>

#include "Device.h"
#include "Kinect.h"
#include "KinectMusician.h"
#include "d2d1.h"
#include "Body.h"
#include "PoseEvent.h"

/**
* @brief template function for safely releasing kinect interface objects
*
* @tparam Interface the interface to be released
*/
template <class Interface>
inline void safeRelease(Interface *&pInterfaceToRelease)
{
    if (pInterfaceToRelease != NULL)
    {
        pInterfaceToRelease->Release();
        pInterfaceToRelease = NULL;
    }
}

namespace ttmm
{
/**
* @class KinectDevice
* @brief Extends Device, contains functions for handling a kinect sensor
*(initializing,
* updating, closing), getting & mapping camera data
*
* @see Device
*/
class KinectDevice : public Device<PoseEvent>
{
  public:
    /**
  * Constructor: Create a KinectDevice, needs a reference to a vector of KinectMusicians
  *
  * @param musicians a reference to a vector of KinectMusicians that get data from this device
  */
    KinectDevice(std::vector<KinectMusician> &musicians);
    /**
  * Destructor
  */
    ~KinectDevice();

    using DataType = Device<PoseEvent>::DataType;
    static const int MAX_BODIES = 1; ///<static value for the maximum amount of measured bodies

    /**
  * gets current frame from camera and calls processBody() function, is called periodically by run()
  */
    void update();
    /**
  * checks if device is open or closed
  * 
  * @return a boolean value (true if kinect sensor is open)
  */
	bool isOpen() const override final {
		if (deviceHandle != nullptr)
		{
			return open;
		}
		return false;
	}

	D2D1_POINT_2F getFloor2D() {
		return floor2D;
	}

  private:
	void startup(LPCTSTR applicationPath);
    std::vector<KinectMusician> &musicians;        ///<a reference to a vector of KinectMusicians
    IKinectSensor *deviceHandle;                   ///<a pointer to kinect sensor interface
    IBodyFrameReader *bodyReader;                  ///<a pointer to kinects bodyframereader interface
    ICoordinateMapper *coordinateMapper;           ///<a pointer to kinects coordinatemapper interface
    std::array<Body *, MAX_BODIES> musicianBodies; ///<an array which stores bodies for musicians
    int detectedBodyIndex = -1;                    ///<helper variable for body detection
    std::thread deviceThread;                      ///<thread where update routine will be executed
    bool stopDevice = false;                       ///<is set to true, when the application shall be closed
	bool open = false;							   ///<is set to true, when kinect is started

    Vector4 floor3D;       ///<floor plane represented by a 4-dimensional vector (x,y,z,w)
    D2D1_POINT_2F floor2D; ///<floor coordinates in 2D (x,y)
    float footX;           ///<X-value of current foot position, used to calculate floor2D
    float footZ;           ///<Z-value of current foot position, used to calculate floor2D

    /**
  * yet not implemented
  */
    void registerListener();
    /**
  * will be called by constructor in an own thread, 
  * periodically calls update() while device is open
  */
    void run();
    /**
  * opens kinect sensor, bodyreader and coordinatemapper
  *
  * @return the result of this initialization process
  */
    HRESULT initSensor();
    /**
  * iterate through all bodies (generated by kinect sensor) 
  * and put their joint positions into KinectMusicians' bodies
  *
  * @param bodyCount the amount of bodies
  * @param bodies a pointer to some bodies
  */
    void processBody(int bodyCount, IBody **bodies);
    /**
  * maps a joint from CameraSpace to DepthSpace and then to 2D / ScreenPosition
  *
  * @param joint the joint to be mapped
  * @return the 2D position of this joint in screenspace
  */
    D2D1_POINT_2F mapPoint(Joint joint);
    /**
  * maps floor coordinates to 2D coordinates by using the general plan equation
  */
    void mapFloorTo2D();
};
}
